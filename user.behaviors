;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [:lt.plugins.auto-complete/auto-show-on-input
           :lt.objs.editor/scroll-past-end
           (:lt.objs.style/set-skin "dark")
           (:lt.objs.style/set-theme "ibdknox")
           (:lt.objs.style/font-settings "Inconsolata" 12 1.2)]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/wrap
              :lt.objs.editor/line-numbers
              :lt.objs.editor/highlight-current-line
              (:lt.objs.style/set-skin "dark")
              (:lt.objs.style/set-theme "ibdknox")
              :lt.plugins.vim/activate-vim
              :lt.objs.editor/scroll-past-end]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)
                      :lt.objs.editor/scroll-past-end
                      :lt.plugins.rainbow/rainbow-parens]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app []}}
